package main

import (
	"time"

	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"

	"github.com/spezifisch/silphtelescope/internal/config"
	"github.com/spezifisch/silphtelescope/internal/db"
	"github.com/spezifisch/silphtelescope/pkg/geodex"
	"github.com/spezifisch/silphtelescope/pkg/http"
	"github.com/spezifisch/silphtelescope/pkg/matrix"
	"github.com/spezifisch/silphtelescope/pkg/pogo"
	"github.com/spezifisch/silphtelescope/pkg/roomservice"
)

var (
	rootCmd = &cobra.Command{
		Use:   "silpht",
		Short: "Silph Telescope",
		Long:  `A matrix bot that posts Pokemon spawns.`,
		Run: func(cmd *cobra.Command, args []string) {
			a := app{}
			a.run()
		},
	}
)

type app struct {
	poster *roomservice.Poster
	matrix *matrix.Matrix
}

func (a *app) run() {
	// http
	http.Bind = requireString("HTTPBind")
	// matrix
	homeserver := requireString("Homeserver")
	userID := requireString("user_id")
	accessToken := requireString("access_token")
	// internal/db
	dbBasePath := requireString("DBBasePath")
	// pokedex
	pokedexFile := requireString("Pokedex")
	// geodex
	geoDexBasePath := requireString("GeoDexBasePath")
	t38Hostname := requireString("Tile38Hostname")
	t38Password := viper.GetString("Tile38Password")

	// read pokedex
	dex, err := pogo.NewPokedex(pokedexFile)
	if err != nil {
		log.WithError(err).Errorf("failed reading pokedex from %s", pokedexFile)
		return
	}

	// setup geodex
	var geoDex *geodex.GeoDex
	for i := 0; i < 10; i++ {
		geoDex, err = geodex.NewGeoDex(geoDexBasePath, t38Hostname, t38Password)
		if err != nil {
			log.WithError(err).Errorf("failed initializing GeoDex (t38 host: %s, diskdb: %s)",
				t38Hostname, geoDexBasePath)
		} else {
			log.Info("GeoDex initialized")
			break
		}

		time.Sleep(1 * time.Second)
	}

	// setup db for dynamic storage
	db := db.NewDB(&dbBasePath)

	// setup matrix client
	a.matrix = matrix.New(homeserver, userID, accessToken)

	// wire roomservice channels (RX) to http server (TX)
	a.poster = roomservice.NewPoster(a.matrix, db)
	a.matrix.SetPoster(a.poster)
	a.poster.ResumeStateOnStartup = true
	a.poster.MainControl = a
	a.poster.Pokedex = dex
	a.poster.GeoDex = geoDex
	a.poster.GymUpdates = make(chan pogo.Gym, 50)
	a.poster.RaidUpdates = make(chan pogo.Raid, 50)
	a.poster.SpawnUpdates = make(chan pogo.Spawn, 200)

	// sender
	http.GymUpdates = a.poster.GymUpdates
	http.RaidUpdates = a.poster.RaidUpdates
	http.SpawnUpdates = a.poster.SpawnUpdates

	go a.poster.Run() // filters relevant data and posts to matrix rooms
	go a.matrix.Run() // matrix sync loop, handles commands
	http.Run()        // handles admin webinterface and MAD webhook
}

// Stop is called by Poster when graceful shutdown command is received
func (a *app) Stop() {
	a.matrix.Stop()
	http.Stop()
}

func requireString(key string) (ret string) {
	ret = viper.GetString(key)
	if ret == "" {
		log.Fatal("configuration parameter missing:", key)
	}
	return
}

func main() {
	log.SetLevel(log.DebugLevel)
	log.SetFormatter(&log.TextFormatter{
		FullTimestamp: true,
	})

	cobra.OnInitialize(config.InitConfig)

	rootCmd.PersistentFlags().StringP("config", "c", "", "config file")

	rootCmd.PersistentFlags().StringP("bind", "b", "localhost:8000", "address for the http server to listen on")

	rootCmd.PersistentFlags().StringP("homeserver", "s", "https://matrix.example.com", "matrix homeserver")
	rootCmd.PersistentFlags().StringP("userid", "u", "@foo:matrix.example.com", "user id for matrix homeserver")
	rootCmd.PersistentFlags().StringP("token", "t", "", "access token for matrix homeserver")

	rootCmd.PersistentFlags().StringP("db", "d", "db-silpht", "base path for dynamic data storage")

	rootCmd.PersistentFlags().StringP("pokedex", "", "./data/pokedex.json", "path to pokedex.json generated by pokedexgen")

	rootCmd.PersistentFlags().StringP("geodex", "", "./tmp/geodex", "path to geodex generated by geodexgen")
	rootCmd.PersistentFlags().StringP("t38hostname", "", "localhost:9851", "hostname for tile38 server")
	rootCmd.PersistentFlags().StringP("t38password", "", "", "password for tile38 server if needed")

	viper.BindPFlag("HTTPBind", rootCmd.PersistentFlags().Lookup("bind"))
	viper.BindPFlag("Homeserver", rootCmd.PersistentFlags().Lookup("homeserver"))
	viper.BindPFlag("user_id", rootCmd.PersistentFlags().Lookup("userid"))
	viper.BindPFlag("access_token", rootCmd.PersistentFlags().Lookup("token"))
	viper.BindPFlag("DBBasePath", rootCmd.PersistentFlags().Lookup("db"))
	viper.BindPFlag("Pokedex", rootCmd.PersistentFlags().Lookup("pokedex"))
	viper.BindPFlag("GeoDexBasePath", rootCmd.PersistentFlags().Lookup("geodex"))
	viper.BindPFlag("Tile38Hostname", rootCmd.PersistentFlags().Lookup("t38hostname"))
	viper.BindPFlag("Tile38Password", rootCmd.PersistentFlags().Lookup("t38password"))

	viper.SetDefault("HTTPBind", "localhost:8000")
	viper.SetDefault("DBBasePath", "db-silpht")
	viper.SetDefault("Pokedex", "./data/pokedex.json")
	viper.SetDefault("Tile38Password", "")

	http.Init()

	rootCmd.Execute()
}
